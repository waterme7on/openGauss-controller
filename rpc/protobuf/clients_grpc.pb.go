// Code generated by protoc-gen-go-grpc. DO NOT EDIT.

package protobuf

import (
	context "context"
	grpc "google.golang.org/grpc"
	codes "google.golang.org/grpc/codes"
	status "google.golang.org/grpc/status"
)

// This is a compile-time assertion to ensure that this generated file
// is compatible with the grpc package it is being compiled against.
// Requires gRPC-Go v1.32.0 or later.
const _ = grpc.SupportPackageIsVersion7

// OpenGaussControllerClient is the client API for OpenGaussController service.
//
// For semantics around ctx use and closing/ending streaming RPCs, please refer to https://pkg.go.dev/google.golang.org/grpc/?tab=doc#ClientConn.NewStream.
type OpenGaussControllerClient interface {
	Scale(ctx context.Context, in *ScaleRequest, opts ...grpc.CallOption) (*ScaleResponse, error)
	Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error)
}

type openGaussControllerClient struct {
	cc grpc.ClientConnInterface
}

func NewOpenGaussControllerClient(cc grpc.ClientConnInterface) OpenGaussControllerClient {
	return &openGaussControllerClient{cc}
}

func (c *openGaussControllerClient) Scale(ctx context.Context, in *ScaleRequest, opts ...grpc.CallOption) (*ScaleResponse, error) {
	out := new(ScaleResponse)
	err := c.cc.Invoke(ctx, "/controllerClient.OpenGaussController/Scale", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

func (c *openGaussControllerClient) Get(ctx context.Context, in *GetRequest, opts ...grpc.CallOption) (*GetResponse, error) {
	out := new(GetResponse)
	err := c.cc.Invoke(ctx, "/controllerClient.OpenGaussController/Get", in, out, opts...)
	if err != nil {
		return nil, err
	}
	return out, nil
}

// OpenGaussControllerServer is the server API for OpenGaussController service.
// All implementations must embed UnimplementedOpenGaussControllerServer
// for forward compatibility
type OpenGaussControllerServer interface {
	Scale(context.Context, *ScaleRequest) (*ScaleResponse, error)
	Get(context.Context, *GetRequest) (*GetResponse, error)
	mustEmbedUnimplementedOpenGaussControllerServer()
}

// UnimplementedOpenGaussControllerServer must be embedded to have forward compatible implementations.
type UnimplementedOpenGaussControllerServer struct {
}

func (UnimplementedOpenGaussControllerServer) Scale(context.Context, *ScaleRequest) (*ScaleResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Scale not implemented")
}
func (UnimplementedOpenGaussControllerServer) Get(context.Context, *GetRequest) (*GetResponse, error) {
	return nil, status.Errorf(codes.Unimplemented, "method Get not implemented")
}
func (UnimplementedOpenGaussControllerServer) mustEmbedUnimplementedOpenGaussControllerServer() {}

// UnsafeOpenGaussControllerServer may be embedded to opt out of forward compatibility for this service.
// Use of this interface is not recommended, as added methods to OpenGaussControllerServer will
// result in compilation errors.
type UnsafeOpenGaussControllerServer interface {
	mustEmbedUnimplementedOpenGaussControllerServer()
}

func RegisterOpenGaussControllerServer(s grpc.ServiceRegistrar, srv OpenGaussControllerServer) {
	s.RegisterService(&OpenGaussController_ServiceDesc, srv)
}

func _OpenGaussController_Scale_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(ScaleRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenGaussControllerServer).Scale(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controllerClient.OpenGaussController/Scale",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenGaussControllerServer).Scale(ctx, req.(*ScaleRequest))
	}
	return interceptor(ctx, in, info, handler)
}

func _OpenGaussController_Get_Handler(srv interface{}, ctx context.Context, dec func(interface{}) error, interceptor grpc.UnaryServerInterceptor) (interface{}, error) {
	in := new(GetRequest)
	if err := dec(in); err != nil {
		return nil, err
	}
	if interceptor == nil {
		return srv.(OpenGaussControllerServer).Get(ctx, in)
	}
	info := &grpc.UnaryServerInfo{
		Server:     srv,
		FullMethod: "/controllerClient.OpenGaussController/Get",
	}
	handler := func(ctx context.Context, req interface{}) (interface{}, error) {
		return srv.(OpenGaussControllerServer).Get(ctx, req.(*GetRequest))
	}
	return interceptor(ctx, in, info, handler)
}

// OpenGaussController_ServiceDesc is the grpc.ServiceDesc for OpenGaussController service.
// It's only intended for direct use with grpc.RegisterService,
// and not to be introspected or modified (even as a copy)
var OpenGaussController_ServiceDesc = grpc.ServiceDesc{
	ServiceName: "controllerClient.OpenGaussController",
	HandlerType: (*OpenGaussControllerServer)(nil),
	Methods: []grpc.MethodDesc{
		{
			MethodName: "Scale",
			Handler:    _OpenGaussController_Scale_Handler,
		},
		{
			MethodName: "Get",
			Handler:    _OpenGaussController_Get_Handler,
		},
	},
	Streams:  []grpc.StreamDesc{},
	Metadata: "protobuf/clients.proto",
}

/*
Copyright The Kubernetes Authors.

Licensed under the Apache License, Version 2.0 (the "License");
you may not use this file except in compliance with the License.
You may obtain a copy of the License at

    http://www.apache.org/licenses/LICENSE-2.0

Unless required by applicable law or agreed to in writing, software
distributed under the License is distributed on an "AS IS" BASIS,
WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
See the License for the specific language governing permissions and
limitations under the License.
*/

// Code generated by lister-gen. DO NOT EDIT.

package v1

import (
	v1 "github.com/waterme7on/openGauss-operator/pkg/apis/opengausscontroller/v1"
	"k8s.io/apimachinery/pkg/api/errors"
	"k8s.io/apimachinery/pkg/labels"
	"k8s.io/client-go/tools/cache"
)

// OpenGaussLister helps list OpenGausses.
// All objects returned here must be treated as read-only.
type OpenGaussLister interface {
	// List lists all OpenGausses in the indexer.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.OpenGauss, err error)
	// OpenGausses returns an object that can list and get OpenGausses.
	OpenGausses(namespace string) OpenGaussNamespaceLister
	OpenGaussListerExpansion
}

// openGaussLister implements the OpenGaussLister interface.
type openGaussLister struct {
	indexer cache.Indexer
}

// NewOpenGaussLister returns a new OpenGaussLister.
func NewOpenGaussLister(indexer cache.Indexer) OpenGaussLister {
	return &openGaussLister{indexer: indexer}
}

// List lists all OpenGausses in the indexer.
func (s *openGaussLister) List(selector labels.Selector) (ret []*v1.OpenGauss, err error) {
	err = cache.ListAll(s.indexer, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.OpenGauss))
	})
	return ret, err
}

// OpenGausses returns an object that can list and get OpenGausses.
func (s *openGaussLister) OpenGausses(namespace string) OpenGaussNamespaceLister {
	return openGaussNamespaceLister{indexer: s.indexer, namespace: namespace}
}

// OpenGaussNamespaceLister helps list and get OpenGausses.
// All objects returned here must be treated as read-only.
type OpenGaussNamespaceLister interface {
	// List lists all OpenGausses in the indexer for a given namespace.
	// Objects returned here must be treated as read-only.
	List(selector labels.Selector) (ret []*v1.OpenGauss, err error)
	// Get retrieves the OpenGauss from the indexer for a given namespace and name.
	// Objects returned here must be treated as read-only.
	Get(name string) (*v1.OpenGauss, error)
	OpenGaussNamespaceListerExpansion
}

// openGaussNamespaceLister implements the OpenGaussNamespaceLister
// interface.
type openGaussNamespaceLister struct {
	indexer   cache.Indexer
	namespace string
}

// List lists all OpenGausses in the indexer for a given namespace.
func (s openGaussNamespaceLister) List(selector labels.Selector) (ret []*v1.OpenGauss, err error) {
	err = cache.ListAllByNamespace(s.indexer, s.namespace, selector, func(m interface{}) {
		ret = append(ret, m.(*v1.OpenGauss))
	})
	return ret, err
}

// Get retrieves the OpenGauss from the indexer for a given namespace and name.
func (s openGaussNamespaceLister) Get(name string) (*v1.OpenGauss, error) {
	obj, exists, err := s.indexer.GetByKey(s.namespace + "/" + name)
	if err != nil {
		return nil, err
	}
	if !exists {
		return nil, errors.NewNotFound(v1.Resource("opengauss"), name)
	}
	return obj.(*v1.OpenGauss), nil
}
